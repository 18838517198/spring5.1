/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.aop;

import java.lang.reflect.Method;

/**
 * Part of a {@link Pointcut}: Checks whether the target method is eligible for advice.
 * Pointcut的一部分: 检查目标方法是否有资格获得建议。
 *
 * <p>A MethodMatcher may be evaluated <b>statically</b> or at <b>runtime</b> (dynamically).
 * MethodMatcher可以静态地或在运行时(动态地)求值。
 * Static matching involves method and (possibly) method attributes.
 * 静态匹配涉及方法和(可能)方法属性。
 * Dynamic matching
 * also makes arguments for a particular call available, and any effects of running
 * previous advice applying to the joinpoint.
 * 动态匹配还使特定调用的参数可用，并且运行之前建议的任何效果都适用于连接点。
 *
 *
 * <p>If an implementation returns {@code false} from its {@link #isRuntime()}
 * method, evaluation can be performed statically, and the result will be the same
 * for all invocations of this method, whatever their arguments.
 * 如果一个实现从它的isRuntime()方法返回false，则可以静态地执行求值，
 * 并且该方法的所有调用的结果都是相同的，无论它们的参数是什么。
 * This means that
 * if the {@link #isRuntime()} method returns {@code false}, the 3-arg
 * {@link #matches(java.lang.reflect.Method, Class, Object[])} method will never be invoked.
 * 这意味着如果这个isRuntime()方法返回false,三个参数的matches(Method,Class,Object[])方法
 * 将会从不被调用。
 *
 * <p>If an implementation returns {@code true} from its 2-arg
 * {@link #matches(java.lang.reflect.Method, Class)} method and its {@link #isRuntime()} method
 * returns {@code true}, the 3-arg {@link #matches(java.lang.reflect.Method, Class, Object[])}
 * method will be invoked <i>immediately before each potential execution of the related advice</i>,
 * to decide whether the advice should run.
 * 如果一个实现返回true从它的两个参数matches(Method,Class)方法并且它的isRuntime()方法返回true,
 * 这个三个参数的matches(Method,Class,Object[])方法在每次可能执行相关建议之前将会被立即调用，去
 * 决定是否这个建议应该运行。
 * All previous advice, such as earlier interceptors
 * in an interceptor chain, will have run, so any state changes they have produced in
 * parameters or ThreadLocal state will be available at the time of evaluation.
 * 所有先前的建议，例如早期在一个拦截器链的拦截器，将会执行，所以任何状态的变化参数或ThreadLocal状态将在计算时可用。
 *
 * <p>Concrete implementations of this interface typically should provide proper
 * implementations of {@link Object#equals(Object)} and {@link Object#hashCode()}
 * in order to allow the matcher to be used in caching scenarios &mdash; for
 * example, in proxies generated by CGLIB.
 * 这个接口的具体实现典型地应该提供合适的equals(Object)和hashCode()地实现，以便于这个匹配器在缓存
 * 场景中被使用。例如，在CGLIB生成的代理中。
 *
 * @author Rod Johnson
 * @since 11.11.2003
 * @see Pointcut
 * @see ClassFilter
 */
public interface MethodMatcher {

	/**
	 * Perform static checking whether the given method matches.
	 * 执行静态检查给定方法是否匹配。
	 * <p>If this returns {@code false} or if the {@link #isRuntime()}
	 * method returns {@code false}, no runtime check (i.e. no
	 * {@link #matches(java.lang.reflect.Method, Class, Object[])} call)
	 * will be made.
	 * 如果这个方法返回false或者如果isRuntime()方法返回false,则任何运行时检查
	 * (matches(Method,Class,Object[]调用))将不会执行。
	 * @param method the candidate method
	 *               候选方法
	 * @param targetClass the target class
	 *                    目标类
	 * @return whether or not this method matches statically
	 * 返回: 是否这个方法静态地匹配
	 */
	boolean matches(Method method, Class<?> targetClass);

	/**
	 * Is this MethodMatcher dynamic, that is, must a final call be made on the
	 * {@link #matches(java.lang.reflect.Method, Class, Object[])} method at
	 * runtime even if the 2-arg matches method returns {@code true}?
	 * <p>Can be invoked when an AOP proxy is created, and need not be invoked
	 * again before each method invocation.
	 * @return whether or not a runtime match via the 3-arg
	 * {@link #matches(java.lang.reflect.Method, Class, Object[])} method
	 * is required if static matching passed.
	 *
	 * 这个MethodMatcher是动态的吗，也就是说，即使2-arg匹配方法返回ture,
	 * 在运行时，最后必须调用matches(Method,Class,Object[])方法。
	 * 可以在创建AOP代理时调用，而不需要再次调用，在每次方法调用之前。
	 * 返回: 是否通过3-arg进行运行时匹配
	 * matches(Method,Class,Object[])方法如果静态匹配通过，是必需的
	 */
	boolean isRuntime();

	/**
	 * Check whether there a runtime (dynamic) match for this method,
	 * which must have matched statically.
	 * 检查是否存在此方法的一个运行时(动态)匹配，必须静态匹配
	 * <p>This method is invoked only if the 2-arg matches method returns
	 * {@code true} for the given method and target class, and if the
	 * {@link #isRuntime()} method returns {@code true}.
	 * 该方法只有2个参数（对于给定的method和目标类）的方法返回ture，和isRuntime()方法返回true才被调用，。
	 * Invoked
	 * immediately before potential running of the advice, after any
	 * advice earlier in the advice chain has run.
	 * 在可能运行建议之前立即调用，在建议链中较早的建议已运行之后。
	 * @param method the candidate method
	 *               候选方法
	 * @param targetClass the target class
	 *                    目标类
	 * @param args arguments to the method
	 *             这个方法的参数
	 * @return whether there's a runtime match
	 * 返回: 是否存在一个运行时匹配
	 * @see MethodMatcher#matches(Method, Class)
	 */
	boolean matches(Method method, Class<?> targetClass, Object... args);


	/**
	 * Canonical instance that matches all methods.
	 */
	MethodMatcher TRUE = TrueMethodMatcher.INSTANCE;

}
