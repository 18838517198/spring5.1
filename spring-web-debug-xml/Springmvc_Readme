1.启动tomcat
2.tomcat解析web.xml(先去解析<Listener />节点,再会解析<servlet />节点)
（3）.listener.init()执行listener的初始化逻辑，创建出来一个spring容器，并存到servletContext（Map集合）
3.load-on-startup:1-tomcat启动的时候生成DispatcherServlet 0-接收到某个请求的时候才会创建并初始化
4.tomcat创建出DispatcherServlet之后，调用DispatcherServlet的初始化方法，即init()方法。而DispatcherServlet
的父类的父类ServletException重写了Servlet接口的init()方法。init()-->创建Spring容器。启动tomcat过程中间就会创建
DispatcherServlet中的 Spring容器--->DispatcherServlet的initStrategies()【除了创建Spring,还会创建其他的，用于
后续处理请求的时候起到作用。如处理请求和方法映射的HandleMapping】--->
①创建RequestMappingHandlerMapping(HandleMapping类型...)
的Bean对象--->而这个Bean对象(RequestMappingHandlerMapping)创建过程中会执行具有Bean特性的afterPropertiesSet()【
InitializingBean】方法。--->afterPropertiesSet()就会去找到当前Spring容器里面一些Controller--->解析Controller中的方法，
注册进mappingRegistry(（请求URL:Method）)
②创建BeanNameUrlHandlerMapping.initApplicationContext()--->
AbstractDetectingUrlHandlerMapping.detectHandlers
只解析名字以"/"开头的Bean，并当作一个handler,也注册
到handlerMap里面保存起来。如@Component("/test") // 映射关系(（"/test":Bean对象）)  ,那么找到这个Bean调什么方法呢？实现Controller(springmvc提供)
                        public class ZhouyuBeanNameController implements Controller{
                          @Override
                          public ModelAndView handleRequest(HttpServletRequest request,HttpServletResponse response){
                            return null;
                          }
                        }
就可以在handleRequest方法里面写我们处理请求的逻辑。
③RequestMappingHandlerAdapter.afterPropertiesSet()初始化逻辑：找加了@ControllerAdvice的Bean
再会找到Bean对象里面加了@InitBinder、@ModelAttribute的方法。找出来先存着。到后面处理请求，这些处理的方法就会起到作用。
而不是等到处理请求的时候我才找。那样会影响处理请求的效率。
...其他
核心是RequestMappingHandlerMapping 和 RequestMappingHandlerAdapter。
5.tomcat正常启动完，就可以处理请求了。

http://localhost:8080/zhouyu/app/world 当tomcat接收到这个请求后会解析/zhouyu,创建一个/zhouyu应用。
/zhouyu应用里面有什么？有servlet。tomcat只关心你的应用里面定义了那些servlet。tomcat就是个servlet容器。
然后在/zhouyu应用里面有个DispatcherServlet。如果你要访问DispatcherServlet,你请求的格式应该是这个样子：
/app/*。然后这个请求就会交给DispatcherServlet来进行处理。然后DispatcherServlet就会看/app/后面的请求
是什么，如world,他就会找到某个Controller里面某个方法，看有没有这个映射，如果有就执行这个方法，就得到一个结果，
最后把这个结果返回给浏览器。找不到就会返回给浏览器404。这些东西，都是DispatcherServlet所返回的。

#6

一个DispatcherServlet对应一个app。而一个上下文可以对应多个app，比如：http://localhost:8080/zhouyu/app/hello
/zhouyu是一个上下文，而/app就是一个app应用。而每个app应用里面都包含一个spring.xml的Spring容器（WebApplicationContext）。
那么在web.xml中再配置一个DispatcherServlet1，对应app1，http://localhost:8080/zhouyu/app1/hello
那么就会再包含一个spring1.xml的Spring容器。
如果这两个容器都扫描项目中同一个包，那么就会创建各自的Bean对象。相当于复制了一份Spring上下文的Bean。
比如，对于app,我只扫描controller,service这两个包，而对于app1，我只扫描controller1,service这两个包，
这样就实现了多版本。但是完全可以在类上加一个路径来实现多版本。为什么要用上面呢？
其实在于说明对于service这个包中的Bean，我并不需要多版本。那么我怎么做到只有一个service包中的Bean呢，且app和app1可以共用。
那就再搞一个spring容器，然后再指定一个配置文件，那么这个配置文件只扫描service这个包，这样service的Bean就只有一份。
那么到现在就有三个spring容器了。那么app、app1注入service中的Bean，怎么实现呢？那么就需要在app、app1中的容器和外部的spring容器之间，
绑定一个父子关系。就是如果我自己没有service的Bean，就回去父容器找service的Bean。
那么app,app1中的容器称为子容器，外部公用的容器叫做父容器。
对于大部分应用来说，有一个容器就已经是足够的了。所以不需要父容器。只需要DispatcherServlet中的一个容器就够了。也就是不用配置Listener。
就简简单单地配置一个DispatcherServlet就行了。
